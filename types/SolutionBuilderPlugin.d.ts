import { InvalidatedProject } from "typescript";
import BuildMode from "./BuildMode";
import FileRepositoryCache from "./File/FileRepositoryCache";
import { SolutionBuilderOptions } from "./SolutionBuilderConfigProcessor";
/**
 * Builds a SolutionBuilder with Watch.
 *
 * Overrides the readFile and writeFile in order to trap and change requests and responses made by typescript in order to
 * better incorporate Rollup changes.
 */
export default class SolutionBuilderPlugin {
    private _buildMode?;
    private _activeProject?;
    private readonly fileRepository;
    private readonly _options;
    get options(): SolutionBuilderOptions;
    get buildMode(): BuildMode;
    private set buildMode(value);
    get activeProject(): InvalidatedProject<any>;
    private set activeProject(value);
    /**
     * Should be called at the end of every project loop to ensure no additional calls happen after the {@see validateProjects}
     * is done.
     * @private
     */
    private clearActiveProject;
    /**
     * Hooks into the read and write executions in order to track files.
     */
    constructor(fileRepository: FileRepositoryCache, options: SolutionBuilderOptions);
    /**
     * Bind's this plugin to an existing SolutionBuilderHost config.
     * @param host
     * @private
     */
    private generateHostHooks;
    /**
     * Used to toggle the running mode for the plugin. If watchMode is set to true, Typescript will begin file watching.
     * @param watchMode
     */
    setMode(watchMode: boolean): void;
    /**
     * TODO override the options here with user specific changes. I think it may be nice to have project specific
     *  config overloading, so people can specify the config path they want to replace with whatever is passed into
     *  rollup. Additionally, I should probably force specific flags on multi-projects so that people do not have to
     *  worry about a rouge config breaking TypesScript.
     *
     * TODO rootNames is probably a better place to hook into and provide a verification within the project.
     *  Will need to verify the behaviour on multi-projects and how it handles a non .ts file in the list.
     * Used to extend and modify the program before the files are outputted.
     * @param originalProgram
     * @param rootNames
     * @param options
     * @param host
     * @param oldProgram
     * @param configFileParsingDiagnostics
     * @param projectReferences
     * @private
     */
    private createProgram;
    /**
     * Overridden to help the SolutionBuilder know if newly created file-folders exists.
     * @param path
     */
    private directoryExists;
    /**
     * Appends submodule relationship data to be used by Rollup for figuring out dependency imports.
     * This function also helps with alias conversions.
     *
     * @param moduleNames
     * @param containingFile
     * @param reusedNames
     * @param redirectedReference
     * @param options
     */
    private resolveModuleNames;
    /**
     * Overridden to hook into the FileRepository which will keep temporary files for anything generated by Typescript.
     * @param file
     */
    private fileExists;
    /**
     * Appends the latest file changes from the system, or pulls in the latest cached changes for a newly created file.
     * @param path
     * @param encoding
     * @private
     */
    private readFile;
    /**
     * Any file written is captured by the FileRepository so that Rollup can handle the digesting of the file later.
     * @param path
     * @param data
     * @param writeByteOrderMark
     * @private
     */
    private writeFile;
    /**
     * Each time a file is changed, we need to go through the invalid project list, and let Typescript validate
     * the configurations of those files. Typescript uses a cached build file to help speed up the update process.
     *
     * I currently don't have a better way of processing file changes as I don't know which files typescript has
     * actually changed. If someone knows something inside the API that can be hooked into, it would be optimal to only
     * loop through changed files instead of all files.
     *
     * @private
     * @see watch
     * @see run
     */
    private validateProjects;
    /**
     * Reads specifically the start and end of project builds.
     * This was pulled from the original rollup typescript plugin.
     *
     * Function run() will also trigger onBuildStarting.
     * @param diagnostic
     * @param newLine
     * @param options
     * @param errorCount
     * @see setMode
     */
    private watch;
    /**
     * Should be called when the project is ready to begin. This is always run no matter what BuildMode is being
     * used.
     *
     * Generate the projects
     */
    run(): void;
}
